principle_name: My code style

principle_description: |
  1. Functions should not re-implement existing logic. If you know that some function already implemented in some library (numpy, pandas, scipy...), prefer these 3rd party implementations rather than yours.
  2. Avoid comments. 
    - Try to make it clear what function or class do from its name, param names and types, not by commenting. 
    - Comments allowed only in complex logic (for example math), only if it is impossible to express your idea by clear code.
    - Especially avoid commented code. If you think some code block is very useful, but now it should not run, hide under some switchable parameter + if.
  3. Naming guidelines
    - avoid meaningless names
    - avoid shortenings
    - do not use names that already occupied, for example, input is a python reserved name
  4. All functions should always have input and output explicit typing with few exceptions: 
    - If no output in function, typehint may be omitted. 
    - self parameter of class methods does not need typehint
    - variables are not obligatory typed
  5. Soft single-responsibility:
    - If method obviously too long or have complex logic, it should be split on simple functions.
    - This is soft rule, so only hard violations should be reported
  6. There should be no debug code in production code.
    - All simple debug (that can be easily reproduced next time) code should be removed
    - Complex debug code that you want to keep should be passed to code as argument, not be embedded. For example, some special debug loggers may be passed.
  7. Avoid matching by string, if some string is used as a key and used in several places and you need to every time type it, consider moving it to constant or Enum (if there are several keys)
  8. Avoid hardcode and magic numbers
    - This is soft rule, only hard violations should be reported
    - For example there should be no local pathes or other hardcoded parameters left that you used for debugging. These parameters should be introduced to code using argparse.
    - The only exceptions where hard-coding allowed are tests. In tests you could use any magic numbers as you want (for testing purposes).
  9. Pydantic classes recommended:
    - Preferred way of organising classes is to be a BaseModel class with all fields required for logic accepted from outside rather than using complex initialisation logic
    - Initialisation and building logic should be moved to a special place, for example to dependency_injector.containers
    - This is soft rule, only hard violations should be reported
  10. Avoid confusing naming. For example class *Builder should actually build something
  11. Each unittest should assert something. Avoid tests that just checks for absense of exceptions.
  12. Avoid prints
    - No debug prints should be left in code after debug
    - If you need printing in production code, prefer specialised logging classes.
  13. Prefer Path lib over str + os.path
  14. Avoid very complex code lines where a lot of logic done in single line. In that case better to move intermediate computations to a separate variable.
  15. The code with obvious logical errors should be reported

review_required_examples: |
  ```
  # sum function
  def sum(a, b):
      return a * b
  ```
  This function violates several principles at once:
  1. It re-implement logic of sum already implemented, for example in numpy
  2. has useless comment not introducing any new information
  3. has meaningless parameter names
  4. missing both input and output typehints
  5. has logic error. It do multiplication even though the name is sum
  

review_not_required_examples: |
  `from pydantic import BaseModel as BaseModelV2`: though V2 is not very clear name, because langchain currently uses pydantic v1, so programs using it have to distinguish pydantic v1 and pydantic v2
  
  For example if we have code
  ```
  24: async def review_file_diff(
  25:    self, 
  26:    diff: str
  27: ) -> FileDiffReview:
  ```
  and you have reviewed it as follows:
  `The function 'review_file_diff' lacks explicit input typing for its parameter 'diff'.`,
  this is the bad review, because diff already have explicit input typing and you erroneously reporting that it has not (but it has typing `str`, self does not need typing). BE VERY CAREFUL ABOUT THIS TYPE OF MISTAKE! ALWAYS DOUBLE CHECK LACK OF TYPING BEFORE REPORTING IT!!!
  
  For example if you review code
  ```
  33: class Reviewer(BaseModelV2, ABC):
  34:   async def review_file_diff(self, diff: str) -> FileDiffReview:
  35:       pass
  ```
  and you have reviewed it as follows:
  `The class 'Reviewer' might be violating the naming guidelines by not being descriptive enough about its purpose.`
  this is bad review, because this abstract class with single abstract method `review`. You should not report such a subjective violation, only if some principle is objectively violated.
  
  For example if you report following:
  ```
  what is violated: The code with obvious logical errors should be reported
  how it is violated: Using a broad 'except Exception' clause can lead to logical errors by suppressing unexpected exceptions.
  ```
  This is bad review, because you are reporting problem not explicitly mentioned in your instructions. You supposed to report existing logical errors in code, not the code that "can lead to logical errors"
  
